from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from PIL import Image
import torch
import io
import torchvision.transforms as transforms

app = FastAPI()

# ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ React Native ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô origin ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ React Native ‡πÑ‡∏î‡πâ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üß† ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• PyTorch (.pt) ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢ torch.jit.save ‡πÅ‡∏•‡πâ‡∏ß
model = torch.jit.load("flower_model_mobile.pt", map_location=torch.device("cpu"))
model.eval()

# üìê Transform ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô
transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),
])

# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ root ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API
@app.get("/")
def root():
    return {"message": "üå∏ Flower Classifier API is running!"}

# üì∑ Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå class
@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    image = Image.open(io.BytesIO(await file.read())).convert("RGB")
    img_tensor = transform(image).unsqueeze(0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° batch dim

    with torch.no_grad():
        output = model(img_tensor)
        pred = torch.argmax(output, dim=1).item()

    return {"class_index": pred}
